{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seill\\\\OneDrive\\\\Documents\\\\web_services\\\\sumatohomu\\\\src\\\\components\\\\Sensors.tsx\",\n    _s = $RefreshSig$();\n\nimport { AddCircle } from \"@mui/icons-material\";\nimport { Button, CircularProgress, Grid, List, Stack, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { Fragment, useContext, useEffect, useState } from \"react\";\nimport AddSensor from \"./dialogs/AddSensor\";\nimport SensorListItem from \"./utils/SensorListItem\";\nimport requester from \"../modules/requester\";\nimport { AlertContext } from \"./utils/AlertProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sensors = () => {\n  _s();\n\n  const [initialized, setInitialized] = useState(false);\n  const [sensors, setSensors] = useState([]);\n  const [showAddSensor, setShowAddSensor] = useState(false);\n  const [intervalId, setIntervalId] = useState(0);\n  const {\n    showAlert\n  } = useContext(AlertContext);\n  useEffect(() => {\n    const getSensors = async () => {\n      const response = await requester.get(\"sensor\");\n      setSensors([...response.data.data]);\n    };\n\n    const setWatchdog = async () => {\n      try {\n        await getSensors();\n        setInitialized(true);\n\n        if (!intervalId) {\n          setIntervalId(setInterval(() => {\n            getSensors();\n          }, 5000));\n        }\n      } catch (error) {\n        showAlert(\"error\", error);\n      }\n    }; // spoofing, API CALL\n\n\n    setWatchdog();\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [intervalId, showAlert]);\n\n  const handleDelete = async sensor => {\n    // API Call : delete\n    try {\n      await requester.delete(`sensor/${sensor.id}`);\n      setSensors([...sensors.filter(value => value.id !== sensor.id)]);\n    } catch (error) {\n      showAlert(\"error\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    justifyContent: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        align: \"center\",\n        children: \"Capteurs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), initialized ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 8,\n        md: 6,\n        lg: 5,\n        xl: 4,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          children: [/*#__PURE__*/_jsxDEV(List, {\n            children: sensors.map(sensor => /*#__PURE__*/_jsxDEV(SensorListItem, {\n              onDelete: handleDelete,\n              sensor: sensor\n            }, sensor.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            justifyContent: \"center\",\n            display: \"flex\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              sx: {\n                borderRadius: 5\n              },\n              onClick: () => setShowAddSensor(true),\n              children: [/*#__PURE__*/_jsxDEV(AddCircle, {\n                sx: {\n                  marginRight: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this), \" Ajouter\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddSensor, {\n        show: showAddSensor,\n        onClose: () => setShowAddSensor(false),\n        onAddedSensor: sensor => setSensors([...sensors, sensor])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      justifyContent: \"center\",\n      display: \"flex\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Sensors, \"7MsHjYeqgE9amWyU7nWhYcJfe54=\");\n\n_c = Sensors;\nexport default Sensors;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sensors\");","map":{"version":3,"sources":["C:/Users/seill/OneDrive/Documents/web_services/sumatohomu/src/components/Sensors.tsx"],"names":["AddCircle","Button","CircularProgress","Grid","List","Stack","Typography","Box","Fragment","useContext","useEffect","useState","AddSensor","SensorListItem","requester","AlertContext","Sensors","initialized","setInitialized","sensors","setSensors","showAddSensor","setShowAddSensor","intervalId","setIntervalId","showAlert","getSensors","response","get","data","setWatchdog","setInterval","error","clearInterval","handleDelete","sensor","delete","id","filter","value","map","borderRadius","marginRight"],"mappings":"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","sourcesContent":["import { AddCircle } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Grid,\r\n  List,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport {\r\n  Fragment,\r\n  FunctionComponent,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { Sensor, SensorGet } from \"../interfaces/Sensor\";\r\nimport AddSensor from \"./dialogs/AddSensor\";\r\nimport SensorListItem from \"./utils/SensorListItem\";\r\nimport requester from \"../modules/requester\";\r\nimport { AlertContext } from \"./utils/AlertProvider\";\r\n\r\nconst Sensors: FunctionComponent = () => {\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [sensors, setSensors] = useState([] as SensorGet[] | Sensor[]);\r\n  const [showAddSensor, setShowAddSensor] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(0 as any);\r\n  const { showAlert } = useContext(AlertContext);\r\n\r\n  useEffect(() => {\r\n    const getSensors = async () => {\r\n      const response = await requester.get(\"sensor\");\r\n      setSensors([...response.data.data]);\r\n    };\r\n\r\n    const setWatchdog = async () => {\r\n      try {\r\n        await getSensors();\r\n        setInitialized(true);\r\n        if (!intervalId) {\r\n          setIntervalId(\r\n            setInterval(() => {\r\n              getSensors();\r\n            }, 5000)\r\n          );\r\n        }\r\n      } catch (error) {\r\n        showAlert(\"error\", error as string);\r\n      }\r\n    };\r\n    // spoofing, API CALL\r\n    setWatchdog();\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [intervalId, showAlert]);\r\n\r\n  const handleDelete = async (sensor: Sensor) => {\r\n    // API Call : delete\r\n    try {\r\n      await requester.delete(`sensor/${sensor.id}`);\r\n      setSensors([...sensors.filter((value) => value.id !== sensor.id)]);\r\n    } catch (error) {\r\n      showAlert(\"error\", error as string);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} justifyContent=\"center\">\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"h3\" align=\"center\">\r\n          Capteurs\r\n        </Typography>\r\n      </Grid>\r\n      {initialized ? (\r\n        <Fragment>\r\n          <Grid item xs={12} sm={8} md={6} lg={5} xl={4}>\r\n            <Stack>\r\n              <List>\r\n                {sensors.map((sensor) => (\r\n                  <SensorListItem\r\n                    key={sensor.id}\r\n                    onDelete={handleDelete}\r\n                    sensor={sensor as SensorGet}\r\n                  />\r\n                ))}\r\n              </List>\r\n              <Box justifyContent={\"center\"} display=\"flex\">\r\n                <Button\r\n                  color=\"primary\"\r\n                  sx={{ borderRadius: 5 }}\r\n                  onClick={() => setShowAddSensor(true)}\r\n                >\r\n                  <AddCircle sx={{ marginRight: 1 }} /> Ajouter\r\n                </Button>\r\n              </Box>\r\n            </Stack>\r\n          </Grid>\r\n          <AddSensor\r\n            show={showAddSensor}\r\n            onClose={() => setShowAddSensor(false)}\r\n            onAddedSensor={(sensor) => setSensors([...sensors, sensor])}\r\n          />\r\n        </Fragment>\r\n      ) : (\r\n        <Grid item xs={12} justifyContent=\"center\" display={\"flex\"}>\r\n          <CircularProgress color=\"secondary\" />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\nexport default Sensors;\r\n"]},"metadata":{},"sourceType":"module"}