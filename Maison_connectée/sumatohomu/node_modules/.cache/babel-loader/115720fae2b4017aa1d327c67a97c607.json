{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seill\\\\OneDrive\\\\Documents\\\\web_services\\\\sumatohomu\\\\src\\\\components\\\\utils\\\\AlertProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Alert, Slide, Snackbar } from \"@mui/material\";\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AlertContext = /*#__PURE__*/createContext({});\nexport const AlertProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [color, setColor] = useState(\"warning\");\n  const [message, setMessage] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  const showAlert = (color, message) => {\n    setColor(color);\n    setMessage(message);\n    setShow(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AlertContext.Provider, {\n    value: {\n      color,\n      message,\n      show,\n      setShow,\n      showAlert\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AlertProvider, \"qnvv3yy4ytdXvDiKCZU58goXglI=\");\n\n_c = AlertProvider;\nexport const AlertSnack = () => {\n  _s2();\n\n  const {\n    color,\n    message,\n    show,\n    setShow\n  } = useContext(AlertContext);\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    TransitionComponent: Slide,\n    open: show,\n    autoHideDuration: 5000,\n    onClose: () => setShow(false),\n    sx: {\n      maxWidth: 400\n    },\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      severity: color,\n      children: typeof message === \"object\" ? JSON.stringify(message) : message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AlertSnack, \"UoVcgeB4l8/39POMsiNGpEH3+dI=\");\n\n_c2 = AlertSnack;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AlertProvider\");\n$RefreshReg$(_c2, \"AlertSnack\");","map":{"version":3,"sources":["C:/Users/seill/OneDrive/Documents/web_services/sumatohomu/src/components/utils/AlertProvider.tsx"],"names":["Alert","Slide","Snackbar","createContext","useContext","useState","AlertContext","AlertProvider","children","color","setColor","message","setMessage","show","setShow","showAlert","AlertSnack","maxWidth","JSON","stringify"],"mappings":";;;;AAAA,SAASA,KAAT,EAA4BC,KAA5B,EAAmCC,QAAnC,QAAmD,eAAnD;AACA,SAASC,aAAT,EAA2CC,UAA3C,EAAuDC,QAAvD,QAAuE,OAAvE;;AAUA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,CACvC,EADuC,CAAlC;AAIP,OAAO,MAAMI,aAAgC,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAChE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,SAAD,CAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMU,SAAS,GAAG,CAACN,KAAD,EAAoBE,OAApB,KAAwC;AACxDD,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAJD;;AAMA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAF;AAASE,MAAAA,OAAT;AAAkBE,MAAAA,IAAlB;AAAwBC,MAAAA,OAAxB;AAAiCC,MAAAA;AAAjC,KAA9B;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAfM;;GAAMD,a;;KAAAA,a;AAiBb,OAAO,MAAMS,UAA6B,GAAG,MAAM;AAAA;;AACjD,QAAM;AAAEP,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA,IAAlB;AAAwBC,IAAAA;AAAxB,MAAoCV,UAAU,CAACE,YAAD,CAApD;AACA,sBACE,QAAC,QAAD;AACE,IAAA,mBAAmB,EAAEL,KADvB;AAEE,IAAA,IAAI,EAAEY,IAFR;AAGE,IAAA,gBAAgB,EAAE,IAHpB;AAIE,IAAA,OAAO,EAAE,MAAMC,OAAO,CAAC,KAAD,CAJxB;AAKE,IAAA,EAAE,EAAE;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KALN;AAAA,2BAOE,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAER,KAAjB;AAAA,gBACG,OAAOE,OAAP,KAAmB,QAAnB,GAA8BO,IAAI,CAACC,SAAL,CAAeR,OAAf,CAA9B,GAAwDA;AAD3D;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAfM;;IAAMK,U;;MAAAA,U","sourcesContent":["import { Alert, AlertColor, Slide, Snackbar } from \"@mui/material\";\r\nimport { createContext, FunctionComponent, useContext, useState } from \"react\";\r\n\r\ninterface AlertContextType {\r\n  color: AlertColor;\r\n  message: string;\r\n  show: boolean;\r\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\r\n  showAlert: (color: AlertColor, message: string) => void;\r\n}\r\n\r\nexport const AlertContext = createContext<AlertContextType>(\r\n  {} as AlertContextType\r\n);\r\n\r\nexport const AlertProvider: FunctionComponent = ({ children }) => {\r\n  const [color, setColor] = useState(\"warning\" as AlertColor);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const showAlert = (color: AlertColor, message: string) => {\r\n    setColor(color);\r\n    setMessage(message);\r\n    setShow(true);\r\n  };\r\n\r\n  return (\r\n    <AlertContext.Provider value={{ color, message, show, setShow, showAlert }}>\r\n      {children}\r\n    </AlertContext.Provider>\r\n  );\r\n};\r\n\r\nexport const AlertSnack: FunctionComponent = () => {\r\n  const { color, message, show, setShow } = useContext(AlertContext);\r\n  return (\r\n    <Snackbar\r\n      TransitionComponent={Slide}\r\n      open={show}\r\n      autoHideDuration={5000}\r\n      onClose={() => setShow(false)}\r\n      sx={{ maxWidth: 400 }}\r\n    >\r\n      <Alert severity={color}>\r\n        {typeof message === \"object\" ? JSON.stringify(message) : message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}